<!DOCTYPE html>
<html>
<head>
    <title>EG_Editor</title>

    <!--Supporting JS code. -->
    <script src="./support_js/jquery.min.js"></script>
    <!--<script src="./support_js/bootstrap/bootstrap.min.js"></script>
    allows dropdown menus to work, but the debugger yells at you because the file is not found-->
    <script src="./support_js/bootstrap/bootstrap.js"></script>
    <script src="./support_js/lodash.min.js"></script>
    <script src="./support_js/backbone-min.js"></script>
    <script src="./support_js/joint.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js"></script>
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>

    <!--Supporting CSS -->
    <link rel="stylesheet" type="text/css" href="./support_css/styles.css"/>
    <link rel="stylesheet" href="./support_js/bootstrap/bootstrap.css"/>
    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
    <link rel="stylesheet" href="./support_css/joint.css" />

    <!-- EG Editor JS  -->
    <script src="./js/EG_view.js"></script>
    <script src="./js/EG_model.js"></script>
    <script src="./js/EG_controller.js"></script>
    <script src="./js/egAssertion.js"></script>
    <script src="./js/egSheet.js"></script>
    <script src="./js/egContext.js"></script>
    <script src="./js/parser.js"></script>
    <script src="./js/validator.js"></script>
    <script src="./js/syntax.js"></script>
</head>

<body>
<nav class="navbar navbar-default" style="margin-bottom: 0px;">
    <div class="container-fluid">
        <div class="navbar-header">
            <a class="navbar-brand" href="#">Existential Graph Editor</a>
        </div>
    </div>
</nav>

<div>
    <a href="http://www.uah.edu/" data-toggle="tooltip" title="To UAH Website"><img class="uahImg" src="./images/uahLogo.png"></a>
    <form id="inputForm">
        <div class="input-group" style="margin-top: 20px; padding-top: 4px;">
            <input title="!(x) = not x (x false)&#013^ = and&#013!(!(x)) = not not x (x true)&#013x = any character (x true)&#013> = implication&#013| = or" id="expression" type="text" class="form-control" placeholder="Enter Expression" aria-describedby="basic-addon2" onclick="return change_to_black();">
            <div class="input-group-btn" style="color: #337ab7;">
                <button class="btn btn-secondary" onclick="return OnClickDraw();" type="button" id="Submit">Submit</button>
                <button class="btn btn-secondary" onclick="return clearArea();" type="button">Clear</button>
                <button class="btn btn-secondary" onclick= "return save_image();" type="button" >Save</button>
                <button class="btn btn-secondary" data-toggle="modal" data-target="#helpModal" type="button" >Help</button>
            </div>
        </div>
        <div>
        <section style="padding-left: 24px;">
            <textarea id=submit_error readonly rows="1" cols="65" style="width: 74%; color: #FF0000; resize: none;"></textarea>
        </section>
        </div>
        
    </form>
</div>
<br>
<div class="panel panel-primary">
    <div class="panel-body">
        <section>
            <div id="myholder">
                <script src="./js/egSetup.js"></script>
            </div>

            <div id="two">
                <panel id="sideCanvas" style="zoom: 110%">
                    <h4 id="headSide3">CONSTRUCT</h4>
                    <div class="btn-group-horizontal" id="bt1" role="group" aria-label="..." style="margin-top: 10px;">
                        <div class="btn-group btn-group-justified btn-sm" style="padding: 0px;">
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-m btn-info" data-toggle="modal" data-target="#myModal" id="neg">Negative</button>
                            </div>
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-m btn-info" data-toggle="modal" data-target="#myModal2" id="assert">Assert</button>
                            </div>
                        </div>
                        <div class="btn-group btn-group-justified btn-sm" style="padding: 0px;">
                            <div class="btn-group" role="group" aria-label="...">
                                <button type="button" class="btn btn-m btn-info" id="removeSubGraph">Remove</button>
                            </div>
                            <div class="btn-group" role="group" aria-label="...">
                                <button title="Click: Manual resize&#013Double-Click: Auto resize" type="button" class="btn btn-m btn-info" id="resizeSelection" aria-pressed="false">Resize</button>
                            </div>
                        </div>
                        <div class="btn-group btn-group-justified btn-sm" style="padding: 0px;">
                            <div class="btn-group" role="group" aria-label="...">
                                <button type="button" class="btn btn-m btn-info" id="undo">Undo</button>
                            </div>
                            <div class="btn-group" role="group" aria-label="...">
                                <button type="button" class="btn btn-m btn-info" id="redo">Redo</button>
                            </div>
                        </div>
                    </div>
                    <hr style="margin-bottom: 0px;">
                    <h4 id="headSide3">INFERENCE</h4>
                    <div class="btn-group-vertical" role="group" aria-label="...">
                        <button type="button" class="btn btn-info btn-sm" disabled="disabled" id="specialize" data-toggle="modal" data-target="#specializeModal">Specialize (Negative Context) - 1.i</button>
                        <button type="button" class="btn btn-info btn-sm" disabled="disabled" id="generalize">Generalize (Positive Context) - 1.e</button>
                        <button type="button" class="btn btn-info btn-sm" disabled="disabled" id="copy">Copy (Sub-Graph) - 2.i</button>
                        <button type="button" class="btn btn-info btn-sm" disabled="disabled" id="subgraphRemove">Remove (Sub-Graph) - 2.e</button>
                        <button type="button" class="btn btn-info btn-sm" disabled="disabled" id="doubleNegative">2X Negative (Sub-Graph) - 3.i</button>
                        <button type="button" class="btn btn-info btn-sm" disabled="disabled" id="remove2Xneg">Remove 2X (From Sub-Graph) - 3.e</button>
                    </div>
                </panel>
            </div>
        </section>

        <section id="consoleArea">
            <div>
                <textarea id=console readonly rows="4" cols="100" wrap="soft" style="width: 75%; resize: none;"> - Console -</textarea>
            </div>
            <div>
                <button type="button" style="color: #337ab7;" class="btn btn-secondary" onclick="return document.getElementById(&#34;console&#34;).value = &#34; - Console -&#34;"">Clear Console</button>
            </div>
        </section>
        <script>           
            let development = false;
            if(!development){
                document.getElementById("consoleArea").style.display = "none";
            }
        </script>
    </div>
    <!--br-->
</div>

<div class="list-group" style="width: 99%; padding-left: 1%;">
    <a href="http://www.uah.edu/smap" class="list-group-item active">
        <h4 class="list-group-item-heading">This is a UAH Project Done by the SMAP Center</h4>
    </a>
</div>

<!-- Modal button two-->
<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Add Negative</h4>
            </div>
            <div class="modal-body">
                Enter Character:
                <input id="NewNegatedAssertionValue" type="text" name="addChar" maxlength="1" onfocus="clearInput(this)" autofocus/><br>

            </div>
            <div class="modal-footer">
                <img id="uah2" src="./images/uahLogo.png">
                <button id="AddNegatedAssertionButton" type="button" class="btn btn-default" data-dismiss="modal" >Add</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
<!-- Modal button three-->
<div class="modal fade" id="myModal2" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Add Assertion</h4>
            </div>
            <div class="modal-body">
                Enter Character:
                <input id="NewAssertionValue" type="text" name="addChar" maxlength="1" onfocus="clearInput(this)" autofocus/><br>

            </div>
            <div class="modal-footer">
                <img id="uah2" src="./images/uahLogo.png">
                <button id="AddAssertionButton" type="button" class="btn btn-default" data-dismiss="modal">Add</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

<div class="modal fade" id="specializeModal" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Specialize</h4>
            </div>
            <div class="modal-body">
                <input placeholder="Enter Expression" id="SpecializeExpression" type="text" name="addChar" onfocus="clearInput(this)" autofocus style="width: 100%;"/><br>
            </div>
            <div class="modal-footer">
                <img id="uah2" src="./images/uahLogo.png">
                <button id="SpecializeButton" type="button" class="btn btn-default" data-dismiss="modal">Specialize</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

<div class="modal fade" id="helpModal" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Help</h4>
            </div>
            <div class="modal-body">
                *A quick reference can be found by hovering over the "Enter Expression" box.
                <br><br>
                <DL>
                    <DT>Existential Graph</DT>
                    <DD> - An existential graph is a type of diagrammatic or visual notation for logical expressions, proposed by Charles Sanders Peirce.</DD>
                </DL><br>
                <DL>
                    <DT>Graph Creation</DT>
                    <DD> - You may enter an expression for a graph; alternatively, you may construct a graph from scratch using the CONSTRUCT section to add elements to the graph or to other elements.</DD>
                    <DT>Graph Manipulation</DT>
                    <DD> - Once you are ready to manipulate the graph, you can use the MODIFY section to follow rules for existential graph manipulation.</DD>
                </DL><br>
                <DL>
                    <DT>Sheet of Assertion</DT>
                    <DD> - A blank page, or the "sheet of assertion" (or just "sheet"), denotes truth.</DD>
                    <DT>Subgraphs; Assertions and Contexts</DT>
                    <DD> - A subgraph may be any part of the graph, including blank space, not separated by a cut.</DD>
                    <DD> - A letter, or an "assertion," or multiple letters denote truth. They may be enclosed in a simple closed curve, called a cut, to denote false. Cuts, as well as assertions, may be parts of a subgraph, denoting negations inside of cuts.</DD>
                    <DT>Nesting</DT>
                    <DD> - Cuts can nest into other cuts, but cannot intersect. Each nested cut negates the previous denotement, that is if the previous cut denotes false, the nested cut will denote truth.</DD>
                </DL><br>
                <DL>
                    <DT>Specialize (Negative Context)</DT>
                    <DD> - To specialize a subgraph is to insert a subgraph into a false context; any subgraph may be added to a false context.</DD>
                    <DT>Generalize (Positive Context)</DT>
                    <DD> - To generalize a subgraph is to erase a subgraph from a true context; any subgraph may be removed from a true context.</DD>
                    <DT>Copy (Sub-Graph)</DT>
                    <DD> - To copy a subgraph, it must be from a layer closer to the sheet of assertion and copied deeper into a context or nested context; a subgraph may only be copied into a subgraph of a deeper layer, and not of itself. Also referred to as iteration.</DD>
                    <DT>Remove (Sub-Graph)</DT>
                    <DD> - To remove a subgraph, it must exist in a layer closer to the sheet of assertion, such that it may have been copied to where it currently is; a subgraph may only be removed if another subgraph of itself exists at a higher layer. Also referred to as deiteration.</DD>
                    <DT>2x Negative (Sub-Graph)</DT>
                    <DD> - To double negate is to add a double cut around a subgraph. A double cut may be added to any subgraph, as it does not change the context.</DD>
                    <DT>Remove 2X (From Sub-Graph)</DT>
                    <DD> - To remove a double negation is to remove a double cut around a subgraph. A double cut may be removed from any subgraph as long as it has a double cut, as it does not change the context.</DD>
                </DL>
            </div>
            <div class="modal-footer">
                <img id="uah2" src="./images/uahLogo.png">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<script>
    // Wire up the MVC.
    view = new EG_View();
    model = new EG_Model();
    controller = new EG_Controller(model, view);
    view.setController(controller);

    var undoVersions = [];
    var redoVersions = [];

    function undoRedoDisable(){
        $('#undo').prop('disabled',true);
        $('#redo').prop('disabled',true);
        if(undoVersions.length > 1) $('#undo').prop('disabled',false);
        if(redoVersions.length > 0) $('#redo').prop('disabled',false);
    }

    function addUndo(){
        let model = document.getElementById("expression").value;
        redoVersions = [];
        undoVersions.push(model);
        undoRedoDisable();
    }

    function undo(){
        redoVersions.unshift(undoVersions.pop());
        document.getElementById('expression').value = undoVersions[undoVersions.length-1];
        drawGraph();
        undoRedoDisable();
    }

    function redo(){
        document.getElementById('expression').value = redoVersions[0];
        undoVersions.push(redoVersions.shift());
        drawGraph();
        undoRedoDisable();
    }

    document.getElementById('undo').onclick = function(){
        undo();
    }

    document.getElementById('redo').onclick = function(){
        redo();
    }

    // Wire-up event handler to the button.
    document.getElementById("AddNegatedAssertionButton").onclick = function(){
        model.addNegatedAssertion(document.getElementById("NewNegatedAssertionValue").value, getSelectionEgId());
        addUndo();
        document.getElementById("NewNegatedAssertionValue").value="";
        document.getElementById("NewNegatedAssertionValue").focus();
        $('#myModal').on('shown.bs.modal', function () {
            $('#NewNegatedAssertionValue').focus();
        });
    }

    document.getElementById("AddAssertionButton").onclick = function(){
        model.addAssertion(document.getElementById("NewAssertionValue").value, getSelectionEgId());
        addUndo();
        document.getElementById("NewAssertionValue").value="";
        document.getElementById("NewAssertionValue").focus();
        $('#myModal2').on('shown.bs.modal', function () {
            $('#NewAssertionValue').focus();
        });
    }

    document.getElementById("SpecializeButton").onclick = function(){
        model.check_expression(document.getElementById("SpecializeExpression").value, getSelectionEgId());
        addUndo();
        document.getElementById("SpecializeExpression").value="";
        document.getElementById("SpecializeExpression").focus();
        $('#SpecializeModal').on('shown.bs.modal', function () {
            $('#SpecializeExpression').focus();
        });
    }

    document.getElementById("copy").onclick = function(){
        copying = true;
    }

    function removeTemp(){
        model.remove(getSelectionEgId());
        view.removeCell();
        disableButtons();
    }

    document.getElementById("removeSubGraph").onclick = function()
    {
        removeTemp();
        addUndo();
    }

    document.getElementById("resizeSelection").onclick = function(){
        if(resizing){
            if(selection) getTopParent(selection.model).fitEmbeds({deep: true, padding: 15});
            resizing = false;
        }else{
            let resizebutton = $("#resizeSelection").prop('aria-pressed');
            if(!resizebutton){
                resizing = true;
            }else{
                resizing = false;
            }
        }
    }

    document.getElementById("generalize").onclick = function(){
        document.getElementById("removeSubGraph").click();
    }

    document.getElementById("doubleNegative").onclick = function(){
        let x1;
        if(selection){
            if(!selection.model.prop('attrs/text/text')){
                x1 = model.addNegativeContext(selection.model.prop('egId'));
                model.addNegativeContext(x1);
            }else{
                let tempSelect = getSelectionEgId();
                let selectionParent = getCellModel(selection.model.get('parent'));
                removeSelection();
                let outside;
                if(selectionParent) outside = model.addNegativeContext(selectionParent.prop('egId'));
                else outside = model.addNegativeContext(0);
                let inside = model.addNegativeContext(outside);
                copy(getCellModelFromEgId(tempSelect),getCellModelFromEgId(inside));
                selection = paper.findViewByModel(getCellModelFromEgId(tempSelect));
                document.getElementById("removeSubGraph").click();
            }
        }else{
            x1 = model.addNegativeContext(0);
            model.addNegativeContext(x1);
        }
        addUndo();
    }

    document.getElementById("remove2Xneg").onclick = function(){
        let tempSelect = selection.model;
        let firstParent = getCellModel(selection.model.get('parent'));
        let secondParent, thirdParent;
        if(firstParent.get('parent')) secondParent = getCellModel(firstParent.get('parent'));
        if(secondParent && secondParent.get('parent')) thirdParent = getCellModel(secondParent.get('parent'));
        let children = selection.model.get('embeds');
        if(selection.model.prop('attrs/text/text')){
            removeSelection();
            if(thirdParent){
                copy(tempSelect,thirdParent, 0);
            }else{
                copy(tempSelect,0, 0);
            }
            selection = paper.findViewByModel(secondParent);
        }else{
            removeSelection();
            if(children){
                children.forEach(function(item){
                    let childCell = getCellModel(item);
                    if(secondParent){
                        copy(childCell,secondParent,0);
                    }else{
                        copy(childCell,0,0);
                    }
                });
            }
            selection = paper.findViewByModel(firstParent);
        }
        document.getElementById("removeSubGraph").click();
        removeSelection();
    }

    document.getElementById("subgraphRemove").onclick = function(){
        document.getElementById("removeSubGraph").click();
    }

    document.getElementById("console").title = "Spencer wuz 'ere, 2016";
    
    //In the input form (all of it, like submit and clear and save and just all of it)
    $("#inputForm").keypress(function(event){
        //If enter is pressed
        if(event.which == 13){
            //Don't refresh the page
            event.preventDefault();
            //Submit the form instead
            document.getElementById("Submit").click();
        }
    });

    function clearInput(input)
    {
        input.value="";
    }
    
    function clearArea()
    {
        document.getElementById("expression").value = "";
        view.EGclear();
        addUndo();
    }

    function drawGraph()
    {
        view.EGclear();
        if(document.getElementById("expression").value != "")
            view.check_expression(document.getElementById("expression").value);
    }

    function OnClickDraw()
    {
        drawGraph();
        addUndo();
    }
	
	function change_to_black()
    {
		document.getElementById("expression").style.color="black";
		document.getElementById("submit_error").value = "";
	}
	
    window.onerror = function(msg,url,lineNo,columnNo,error){
        if(lineNo != 0 && columnNo != 0){
            document.getElementById("console").value += "\n" + msg + " in " + url + ", Line " + lineNo + ", Col " + columnNo;
        }else{
            // Because of security reasons, this function doesn't give any information outside of this file (which is apparently intentional)
            // It instead gives a bunch of nulls, so if you aren't sure about something that could give an error, use error_submit()
            document.getElementById("console").value += "\n" + msg + " Try something else.";
        }
        document.getElementById("console").scrollTop = document.getElementById("console").scrollHeight;
    };

    // Prints an error to a console. Accepts either "console" or "submit_error" for console.
    function error_submit(msg,console){
		document.getElementById(console).value += "\n" + msg;
        document.getElementById(console).scrollTop = document.getElementById(console).scrollHeight;
 	}

     function save_image(){
         removeSelection();
         //creating a hypothetical canvas to hold the image we want to save
         let canvas = document.createElement('canvas');
         canvas.width = (screen.width / 100) * 72.4;
         canvas.height = 475;
         let ctx = canvas.getContext('2d');
         let img = new Image;
         let svg = paper.svg; //holds the svg

         //converts the svg to xml
         let serializer = new XMLSerializer();
         let str = serializer.serializeToString(svg);

         img.setAttribute("src","data:image/svg+xml;base64,"+btoa(str));

         img.onload = function(){
            //draws the svg on the hypothetical canvas
            ctx.drawImage(img, 0, 0);

            //creates a fake html element and simulates a click that downloads the image
            let a = document.createElement('a');
            //(change later if removing from submit_error)
            a.download = "(EG) " + document.getElementById("expression").value + ".png";
            a.href = canvas.toDataURL('image/png');
            a.click();
         }
     }

     function disableButtons(){
        $('#specialize').prop('disabled', true);
        $('#generalize').prop('disabled', true);
        $('#copy').prop('disabled', true);
        $('#subgraphRemove').prop('disabled', true); //remove in modify section
        $('#doubleNegative').prop('disabled', false);
        $('#remove2Xneg').prop('disabled', true);
        if(selection){
            //Can always add double negation to a selection
            $('#doubleNegative').prop('disabled', false);

            //you can always copy a button, but there may NOT be a valid place to put it
            $('#copy').prop('disabled', false);

            //Checking if you can remove a double negation
            if(selection.model.prop('attrs/text/text')){
                let temp = graph.getCell(selection.model.get('parent'));
                let tempParent;
                if(temp && temp.get('parent')) tempParent = graph.getCell(temp.get('parent'));
                if(temp){
                    if(temp.get('embeds').length == 1){
                        if(tempParent){
                            if(tempParent.get('embeds').length == 1)
                                $('#remove2Xneg').prop('disabled', false);
                        }
                    }
                }
            }else{
                let selectionParent = graph.getCell(selection.model.get('parent'));
                if(selectionParent){
                    if(selectionParent.get('embeds').length == 1)
                        $('#remove2Xneg').prop('disabled', false);
                }
            }
            // Special snowflake remove subgraph.
            if(model.isRemovable(getSelectionEgId()))
            {
                $('#subgraphRemove').prop('disabled', false);
            }
            //Erasure): any subGraph with an even depth can be removed
            if(selection.model.get('parent')){
                if(!getCellModel(selection.model.get('parent')).prop('isNegated')){
                    $('#generalize').prop('disabled', false);
                    if(!selection.model.prop('attrs/text/text')) $('#specialize').prop('disabled', false);
                }  
            }
            else{
                $('#generalize').prop('disabled', false);
                if(!selection.model.prop('attrs/text/text')) $('#specialize').prop('disabled', false);
            }
        }
    }
    
    model.addNegatedAssertion("P",0);
    model.addNegatedAssertion("Q",1);
    addUndo();

</script>

</body>
</html>
