<!DOCTYPE html>
<html>
<head>
    <title>EG_Editor</title>

    <!--Supporting JS code. -->
    <script src="./support_js/jquery.min.js"></script>
    <!--<script src="./support_js/bootstrap/bootstrap.min.js"></script>
    allows dropdown menus to work, but the debugger yells at you because the file is not found-->
    <script src="./support_js/bootstrap/bootstrap.js"></script>
    <script src="./support_js/lodash.min.js"></script>
    <script src="./support_js/backbone-min.js"></script>
    <script src="./support_js/joint.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js"></script>
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>

    <!--Supporting CSS -->
    <link rel="stylesheet" type="text/css" href="./support_css/styles.css"/>
    <link rel="stylesheet" href="./support_js/bootstrap/bootstrap.css"/>
    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
    <link rel="stylesheet" href="./support_css/joint.css" />

    <!-- EG Editor JS  -->
    <script src="./js/EG_view.js"></script>
    <script src="./js/EG_model.js"></script>
    <script src="./js/EG_controller.js"></script>
    <script src="./js/egAssertion.js"></script>
    <script src="./js/egSheet.js"></script>
    <script src="./js/egContext.js"></script>
    <script src="./js/parser.js"></script>
    <script src="./js/validator.js"></script>
    <script src="./js/syntax.js"></script>
</head>

<body>
<nav class="navbar navbar-default">
    <div class="container-fluid">
        <div class="navbar-header">
            <a class="navbar-brand" href="#">Existential Graph Editor</a>
        </div>
    </div>
</nav>

<div>
    <img class="uahImg" src="./images/uahLogo.png">
    <form id="inputForm">
        <div class="input-group">
            <input id="drawType" type="text" class="form-control" placeholder="Enter Expression" aria-describedby="basic-addon2" onclick="return change_to_black();">
            <span  class="input-group-btn" id="drawC" onclick="return OnClickDraw();">
                <button class="btn btn-secondary" type="button" id = "Submit">Submit</button>
            </span>
            <span  class="input-group-btn" id="clear" onclick="return clearArea();">
                <button class="btn btn-secondary" type="button">Clear</button>
            </span>
            <span  class="input-group-btn" id="save">
                <button class="btn btn-secondary" onclick= "return save_image();" type="button" >Save</button>
            </span>
        </div>
        <!--<div>
            <input id="testt" type="text" class="checkbox" placeholder="error" aria-describedby="">
        </div>-->
        <div>
        <section style="padding-left: 24px;">
            <textarea id=submit_error readonly rows="1" cols="65" style="width: 74%"></textarea>
        </section>
        </div>
        
    </form>
</div>
<br>
<p></p>
<div class="panel panel-primary">
    <div class="panel-body">
        <section>
            <div id="myholder">
                <script src="./js/egSetup.js"></script>
            </div>

            <div id="two">
                <panel id="sideCanvas" style="zoom: 110%">
                    <h4 id="headSide3">CONSTRUCT</h4>
                    <div class="btn-group-horizontal" id="bt1" role="group" aria-label="..." style="margin-top: 10px;">
                        <div class="btn-group btn-group-justified btn-sm" style="padding: 0px;">
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-m btn-info" data-toggle="modal" data-target="#myModal" id="neg">Negative</button>
                            </div>
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-m btn-info" data-toggle="modal" data-target="#myModal2" id="assert">Assert</button>
                            </div>
                        </div>
                        <div class="btn-group btn-group-justified btn-sm" style="padding: 0px;">
                            <div class="btn-group" role="group" aria-label="...">
                                <button type="button" class="btn btn-m btn-info" id="removeSubGraph">Remove</button>
                            </div>
                            <div class="btn-group" role="group" aria-label="...">
                                <button type="button" class="btn btn-m btn-info" id="resizeSelection" aria-pressed="false">Resize</button>
                            </div>
                        </div>
                        <div class="btn-group btn-group-justified btn-sm" style="padding: 0px;">
                            <div class="btn-group" role="group" aria-label="...">
                                <button type="button" class="btn btn-m btn-info" id="undo">Undo</button>
                            </div>
                            <div class="btn-group" role="group" aria-label="...">
                                <button type="button" class="btn btn-m btn-info" id="redo">Redo</button>
                            </div>
                        </div>
                    </div>
                    <hr style="margin-bottom: 0px;">
                    <h4 id="headSide3">MODIFY</h4>
                    <div class="btn-group-vertical" role="group" aria-label="...">
                        <button type="button" class="btn btn-info btn-sm" disabled="disabled" id="specialize">Specialize (Negative Context)</button>
                        <button type="button" class="btn btn-info btn-sm" disabled="disabled" id="generalize">Generalize (Positive Context)</button>
                        <button type="button" class="btn btn-info btn-sm" disabled="disabled" id="copy">Copy (Sub-Graph)</button>
                        <button type="button" class="btn btn-info btn-sm" disabled="disabled" id="subgraphRemove">Remove (Sub-Graph)</button>
                        <button type="button" class="btn btn-info btn-sm" disabled="disabled" id="doubleNegative">2X Negative (Sub-Graph)</button>
                        <button type="button" class="btn btn-info btn-sm" disabled="disabled" id="remove2Xneg">Remove 2X (From Sub-Graph)</button>
                    </div>
                </panel>
            </div>
        </section>

        <section>
            <div>
                <textarea id=console readonly rows="4" cols="100" wrap="soft" style="width: 75%;"> - Console -</textarea>
            </div>
            <div>
                <button type="button" class="btn btn-secondary" onclick="return document.getElementById(&#34;console&#34;).value = &#34; - Console -&#34;"">Clear Console</button>
            </div>
        </section>
    </div>
<!--br-->
<div class="list-group">
    <a href="#" class="list-group-item active">
        <h4 class="list-group-item-heading">This is a UAH Project Done by the SMAP Center</h4>
        <p class="list-group-item-text">...</p>
    </a>
</div>

<div class="panel-footer"></div>
</div>

<!-- Modal button two-->
<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Add Negative</h4>
            </div>
            <div class="modal-body">
                Enter Character:
                <input id="NewNegatedAssertionValue" type="text" name="addChar" onfocus="clearInput(this)"autofocus/><br>

            </div>
            <div class="modal-footer">
                <img id="uah2" src="./images/uahLogo.png">
                <button id="AddNegatedAssertionButton" type="button" class="btn btn-default" data-dismiss="modal" >Add</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>

                <script>
                    // Wire-up event handler to the button.
                    document.getElementById("AddNegatedAssertionButton").onclick = function(){model.addNegatedAssertion(document.getElementById("NewNegatedAssertionValue").value, getSelectionEgId());}
                </script>
            </div>
        </div>

    </div>
</div>
<!-- Modal button three-->
<div class="modal fade" id="myModal2" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Add Assertion</h4>
            </div>
            <div class="modal-body">
                Enter Character:
                <input id="NewAssertionValue" type="text" name="addChar" onfocus="clearInput(this)"autofocus/><br>

            </div>
            <div class="modal-footer">
                <img id="uah2" src="./images/uahLogo.png">
                <button id="AddAssertionButton" type="button" class="btn btn-default" data-dismiss="modal">Add</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>

                <script>
                    // Wire-up event handler to the button.
                    document.getElementById("AddAssertionButton").onclick = function(){model.addAssertion(document.getElementById("NewAssertionValue").value, getSelectionEgId());}
                </script>
            </div>
        </div>

    </div>
</div>
<script>
    // Wire up the MVC.
    view = new EG_View();
    model = new EG_Model();
    controller = new EG_Controller(model, view);
    view.setController(controller);

    // Wire-up event handler to the button.
    document.getElementById("AddNegatedAssertionButton").onclick = function(){
        model.addNegatedAssertion(document.getElementById("NewNegatedAssertionValue").value, getSelectionEgId());
        document.getElementById("NewNegatedAssertionValue").value="";
        document.getElementById("NewNegatedAssertionValue").focus();
        $('#myModal').on('shown.bs.modal', function () {
            $('#NewNegatedAssertionValue').focus();
        });

    }

    document.getElementById("AddAssertionButton").onclick = function(){
        model.addAssertion(document.getElementById("NewAssertionValue").value, getSelectionEgId());
        document.getElementById("NewAssertionValue").value="";
        document.getElementById("NewAssertionValue").focus();
        $('#myModal2').on('shown.bs.modal', function () {
            $('#NewAssertionValue').focus();
        });
    }

    document.getElementById("copy").onclick = function(){
        copying = true;
    }

    document.getElementById("removeSubGraph").onclick = function()
    {
        model.remove(getSelectionEgId());
        view.removeCell();
    }

    document.getElementById("resizeSelection").onclick = function(){
        if(resizing){
            if(selection) getTopParent(selection.model).fitEmbeds({deep: true, padding: 15});
            resizing = false;
        }else{
            let resizebutton = $("#resizeSelection").prop('aria-pressed');
            if(!resizebutton){
                resizing = true;
            }else{
                resizing = false;
            }
        }
    }

    document.getElementById("doubleNegative").onclick = function(){
        let x2 = model.addNegativeContext(getSelectionEgId());
        model.addNegativeContext(x2);
    }
    
    //In the input form (all of it, like subimt and clear and save and just all of it)
    $("#inputForm").keypress(function(event){
        //If enter is pressed
        if(event.which == 13){
            //Don't refresh the page
            event.preventDefault();
            //Submit the form instead
            document.getElementById("Submit").click();
        }
    });

    function clearInput(input)
    {
        input.value="";
    }
    
    function clearArea()
    {
        document.getElementById("drawType").value = "";
        view.EGclear();
    }

    function OnClickDraw()
    {
       view.EGclear();
       if(document.getElementById("drawType").value != null)
       view.check_expression(document.getElementById("drawType").value);
    }
	
	function change_to_black(){
		document.getElementById("drawType").style.color="black";
		document.getElementById("submit_error").value = "";
	}
	
    window.onerror = function(msg,url,lineNo,columnNo,error){
        if(lineNo != 0 && columnNo != 0){
            document.getElementById("console").value += "\n" + msg + " in " + url + ", Line " + lineNo + ", Col " + columnNo;
        }else{
            // Because of security reasons, this function doesn't give any information outside of this file (which is apparently intentional)
            // It instead gives a bunch of nulls, so if you aren't sure about something that could give an error, use error_submit()
            document.getElementById("console").value += "\n" + msg + " Try something else.";
        }
        document.getElementById("console").scrollTop = document.getElementById("console").scrollHeight;
    };

    // Prints an error to a console. Accepts either "console" or "submit_error" for console.
    function error_submit(msg,console){
		document.getElementById(console).value += "\n" + msg;
        document.getElementById(console).scrollTop = document.getElementById(console).scrollHeight;
 	}

     //This magically makes the dropdown menus work, something possibly happened with an update to bootstrap to make this required
     $(document).ready(function(){
         $(".dropdown-toggle").dropdown();
     });

     function save_image(){
         //creating a hypothetical canvas to hold the image we want to save
         let canvas = document.createElement('canvas');
         canvas.width = (screen.width / 100) * 72.4;
         canvas.height = 475;
         let ctx = canvas.getContext('2d');
         let img = new Image;
         let svg = paper.svg; //holds the svg

         //converts the svg to xml
         let serializer = new XMLSerializer();
         let str = serializer.serializeToString(svg);

         img.setAttribute("src","data:image/svg+xml;base64,"+btoa(str));

         img.onload = function(){
            //draws the svg on the hypothetical canvas
            ctx.drawImage(img, 0, 0);

            //creates a fake html element and simulates a click that downloads the image
            let a = document.createElement('a');
            //Jquery array of all lines of submit_error textarea, split by newline character
            let consoleLines = $('#submit_error').val().split('\n');
            //Last character of jquery array
            let lastLine = consoleLines[consoleLines.length-1];
            //Name based on last line of jquery array, which should be the expression
            //(change later if removing from submit_error)
            a.download = "(EG) " + lastLine + ".png";
            a.href = canvas.toDataURL('image/png');
            a.click();
         }
     }
     function disableButtons(){
        $('#specialize').prop('disabled', true);
        $('#generalize').prop('disabled', true);
        $('#copy').prop('disabled', true);
        $('#subgraphRemove').prop('disabled', true); //remove in modify section
        $('#doubleNegative').prop('disabled', true);
        $('#remove2Xneg').prop('disabled', true);
        if(selection){
            //Can always add double negation to a selection
            $('#doubleNegative').prop('disabled', false);

            //you can always copy a button, but there may NOT be a valid place to put it
            $('#copy').prop('disabled', false);

            //Checking if you can remove a double negation
            let temp = graph.getCell(selection.model.get('parent'));
            if(temp){
                if(temp.get('embeds').length == 1){
                    if(graph.getCell(temp.get('parent'))){
                        if(graph.getCell(temp.get('parent')).get('embeds').length == 1)
                            $('#remove2Xneg').prop('disabled', false);
                    }
                }
            }
            //Erasure (aka remove Sub Graph): any subGraph with an even depth can be removed
            if(!selection.model.prop('isNegated')){
                $('#subgraphRemove').prop('disabled', false);
            }
        }
        //If there is no selection, all modify buttons are disabled
        else{
            $('#specialize').prop('disabled', true);
            $('#generalize').prop('disabled', true);
            $('#copy').prop('disabled', true);
            $('#subgraphRemove').prop('disabled', true); //remove in modify section
            $('#doubleNegative').prop('disabled', true);
            $('#remove2Xneg').prop('disabled', true);
        }
    }
    
    let notP = model.addNegatedAssertion("P",0);
    let notQ = model.addNegatedAssertion("Q",1);

</script>

</body>
</html>
